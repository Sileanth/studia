effect rec LWT E =
{   spawn : (Unit ->[LWT E,E] Unit) => Unit
    ; yield : Unit => Unit
    ; exit : Unit => Unit
}


data rec Thr E =
| Thr of (Unit -> ThrQueue E ->[E] Unit)
and data ThrQueue E =
| ThrQueue of List (Thr E)


let rec append nx xs = 
    match xs with 
    | []      => [nx]
    | x :: xs => x :: (append nx xs)
    end

let rec hLWT q f =
    handle f () with 
    | return () => fn q => ()
    | yield x  => fn thrq =>
        match thrq with 
        | ThrQueue []                => resume () thrq
        | ThrQueue ((Thr w) :: thrq) => w () (ThrQueue (append (Thr resume) thrq))
        end
    | exit () => fn thrq => 
        match thrq with
        | ThrQueue []                => ()
        | ThrQueue ((Thr w) :: thrq) => w () (ThrQueue thrq)
        end
    | spawn w => fn (ThrQueue thrq) => 
        resume () (ThrQueue ((Thr (fn () thq => hLWT thq w) ) :: thrq))
    end q



