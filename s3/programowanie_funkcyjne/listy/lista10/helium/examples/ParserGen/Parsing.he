
(** Effect used during the parsing *)
effect this Tok =
  (** Consume one token and return it *)
  { get_token   : Unit => Tok
  (** Rollback all lookaheads and set the position to the first token
    which is not consumed *)
  ; rollback    : Unit => Unit
  (** Lookahead token without consuming it. The next lookahead will return
    the next token *)
  ; lookahead   : Unit => Tok
  }

effect Error = { parse_error : Unit => a }

(** Handler for Parsing effect. *)
let run (type R Tok Ans)
    (getToken : Unit ->[|R] Tok)
    (f : Unit -> [this Tok,Error|R] Ans) : Ans / [Error|R] =
  handle f () with
  | return x     => fn _ _ => x
  | get_token () => fn toks laToks =>
    let toks = List.revAppend laToks toks in
    match toks with
    | []          => resume (getToken ()) [] []
    | tok :: toks => resume tok toks []
    end
  | rollback ()  => fn toks laToks =>
    resume () (List.revAppend laToks toks) []
  | lookahead () => fn toks laToks =>
    match toks with
    | []          =>
      let tok = getToken () in
      resume tok [] (tok :: laToks)
    | tok :: toks =>
      resume tok toks (tok :: laToks)
    end
  end [] []
