data Inc V = Z | S of V

data rec Expr V =
| Var of V
| Lam of Expr (Inc V)
| App of Expr V, Expr V

let inc_map f m =
  match m with
  | Z   => Z
  | S x => S (f x)
  end

let rec map (type A B) f (e : Expr A) : Expr B =
  match e with
  | Var x     => Var (f x)
  | Lam e     => Lam (map (inc_map f) e)
  | App e1 e2 => App (map f e1) (map f e2)
  end

let lift f m =
  match m with
  | Z   => Var Z
  | S x => map S (f x)
  end

let rec bind (type A B) (f : A ->[|_] Expr B) e =
  match e with
  | Var x     => f x
  | Lam e     => Lam (bind (lift f) e)
  | App e1 e2 => App (bind f e1) (bind f e2)
  end

let subst e e' =
  bind (fn x =>
    match x with
    | Z   => e'
    | S x => Var x
    end) e
