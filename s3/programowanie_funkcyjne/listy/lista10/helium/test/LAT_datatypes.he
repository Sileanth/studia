data Pair X Y = Pair of X, Y

data rec Stream X =
| Stream of type S. S, (S -> Pair X S)

let rec map (type X Y) (f : X -> Y) (s : Stream X) =
  let (Stream (type S) t g) = s in
  Stream (t : S) (fn r =>
    let (Pair (a : X) b) = g r in
    Pair (f a) b)
