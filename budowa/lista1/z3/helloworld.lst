
helloworld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000c0  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000012  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY, OCTETS
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000764  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 000006b0  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   00000179  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_frame  00000024  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    000002f9  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 00000072  00000000  00000000  00001455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loclists 0000006c  00000000  00000000  000014c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000013  00000000  00000000  00001533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define LED_DDR DDRD
#define LED_PORT PORTD
#define DELAY_TIME 85

int main() {
  UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  80:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  84:	87 7e       	andi	r24, 0xE7	; 231
  86:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

0000008a <.Loc.3>:
  


  LED_DDR |= 0xFF;
  8a:	8a b1       	in	r24, 0x0a	; 10

0000008c <.Loc.4>:
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	8a b9       	out	0x0a, r24	; 10

00000090 <.Loc.5>:
  LED_PORT = 0x0;
  90:	1b b8       	out	0x0b, r1	; 11

00000092 <.L2>:
  int left = 1;
  while(1) {
    LED_PORT = 0;
  92:	1b b8       	out	0x0b, r1	; 11

00000094 <.LBB6>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(__builtin_ceil(__builtin_fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	31 ee       	ldi	r19, 0xE1	; 225
  98:	94 e0       	ldi	r25, 0x04	; 4

0000009a <.L1^B1>:
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	30 40       	sbci	r19, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <.L1^B1>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <L0^A>

000000a4 <L0^A>:
	...

000000a6 <.LBE6>:
    _delay_ms(100);
    LED_PORT = 0xFF;
  a6:	8b b9       	out	0x0b, r24	; 11

000000a8 <.LBB8>:
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	31 ee       	ldi	r19, 0xE1	; 225
  ac:	94 e0       	ldi	r25, 0x04	; 4

000000ae <.L1^B2>:
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	30 40       	sbci	r19, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <.L1^B2>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <L0^A>

000000b8 <L0^A>:
	...

000000ba <.LBE8>:
  while(1) {
  ba:	eb cf       	rjmp	.-42     	; 0x92 <.L2>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
