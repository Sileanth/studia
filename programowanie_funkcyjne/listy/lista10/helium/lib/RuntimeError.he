effect RE =
  { runtimeError : type A. String => A }

let assertFalse (type T) = extern "helium_assertFalse" : String -> T
let printStr = extern "helium_printStr" : String -> Datatypes.Unit
let ( ++ ) = extern "helium_appendStr" : String -> String -> String
let exit (type T) = extern "helium_exit" : Int -> T

let assertNoError s =
  handle
  | runtimeError s' =>
    assertFalse (s ++ " Runtime error raised: " ++ s')
  end

let printAndExit =
  handle
  | runtimeError s =>
    let _ = printStr ("Runtime error raised: " ++ s)
    in exit 3
  end
