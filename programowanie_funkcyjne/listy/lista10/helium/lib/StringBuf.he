(** More efficient buffers of strings where concatenation
    has amortized cost O(log n) *)

data rec this =
| Empty
| Cons of this, String

let contents buf =
  match buf with
  | Empty => ""
  | Cons buf s =>
    let rec concat buf acc =
      match buf with
      | Empty      => acc
      | Cons buf s => concat buf (s ++ acc)
      end
    in concat buf s
  end

let empty = Empty

let rec addString buf s =
  match buf with
  | Empty       => Cons Empty s
  | Cons buf1 s1 =>
    if String.length s1 > String.length s then Cons buf s
    else addString buf1 (s1 ++ s)
  end

let addChar buf c =
  addString buf (String.repeat 1 c)
