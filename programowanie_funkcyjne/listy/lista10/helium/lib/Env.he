effect Env K V T =
  { get   : K => V
  ; reify : Unit => T}

module EnvEq =
functor
  (X : sig
    type this
    val equal : this -> this -> Bool
  end) =>
struct
  module XS = List.Search(X)

  data T V = T of List (Pair X V)

  let proc nf r xs =
    handle
    | get x =>
      resume
      handle XS.assoc x xs with
      | not_found () => nf x
      end
    | reify () =>
      let T ys = r ()
      in resume (T (xs @ ys))
    end

  let emptyEnv = T []
  let withEnv (T xs) = proc error (fn () => emptyEnv) xs
  let extend xs = proc get reify xs
end : sig
  type T : type -> type
  val emptyEnv : type V. T V
  val withEnv  : type V E R. T V -> (Unit ->[Env X V (T V), E] R) ->[Error X, E] R
  val extend   : type V E R. List (Pair X V) -> (Unit ->[Env X V (T V), E] R) ->[Env X V (T V), E] R
end
