module Set2 =
functor (MakeSet :
  functor (X : sig type this val compare : this -> this -> Ord end) =>
  sig
    type this
    val  empty : this
    val  add   : X -> this -> this
    val  mem   : X -> this -> Bool
  end) =>
functor (X : sig type this val compare : this -> this -> Ord end) =>
functor (Y : sig type this val compare : this -> this -> Ord end) :
sig
  type this
  val empty : this
  val add   : X -> Y -> this -> this
  val mem   : X -> Y -> this -> Bool
end => struct
  module Pair = struct
    data this = (,) of X, Y
    let compare (x1, y1) (x2, y2) =
      match X.compare x1 x2 with
      | EQ  => Y.compare y1 y2
      | ord => ord
      end
  end
  include type Pair
  module PairSet = MakeSet(Pair)
  include PairSet
  let add x y = PairSet.add (x, y)
  let mem x y = PairSet.mem (x, y)
end

module Set =
functor(X : sig type this val compare : this -> this -> Ord end) :
sig
  type this
  val  empty : this
  val  add   : X -> this -> this
  val  mem   : X -> this -> Bool
end => struct
  data rec this = [] | (::) of X, this
  let empty = []
  let rec add z xs =
    match xs with
    | []      => z :: []
    | x :: xs =>
      match X.compare z x with
      | EQ => z :: xs
      | _  => x :: add z xs
      end
    end
  let rec mem z xs =
    match xs with
    | []      => False
    | x :: xs =>
      match X.compare z x with
      | EQ => True
      | _  => mem z xs
      end
    end
end

module MakeSet2 = Set2(Set)
