
open Token
open Grammar

(* ======================================== *)
(* Semantic actions *)
let __action_0 tok () = AnonToken tok     
let __action_1 tok name () = ArgToken name tok 
let __action_2 sym name () = NTerm name sym    
let __action_3 sym () = NTerm sym  sym    
let __action_4 () = []             
let __action_5 argList arg () = arg :: argList 
let __action_6 () = () 
let __action_7 () = () 
let __action_8 symbolDefs preambleCode_opt () =
    { preambleCode = preambleCode_opt
    ; symbols      = symbolDefs
    }
  
let __action_9 () = False 
let __action_10 () = True  
let __action_11 () = ""   
let __action_12 code () = code 
let __action_13 code argList () =
    { pArgs = argList
    ; pCode = code
    }
  
let __action_14 p () = [ p ]   
let __action_15 ps p () = p :: ps 
let __action_16 productionList bar_opt name initIndicator () =
    { sName     = name
    ; sInit     = initIndicator
    ; sProducts = productionList
    }
  
let __action_17 () = SymMap.empty 
let __action_18 symbol symbolDefs () =
    if SymMap.mem symbol.sName symbolDefs then
      Errors.symbol_redefinition symbol.sName
    else
      SymMap.add symbol.sName symbol symbolDefs
  

(* ======================================== *)
(* States *)
let rec __state_dummy k = k
and __state_0 k0 =
  let rec k1 x = __state_2 x k0
  in
  match Parsing.lookahead () with
  | CODE x =>
    let _ = Parsing.get_token () in
    __state_1 x k1
  | _ =>
    let _ = Parsing.rollback () in
     k1 (__action_11 ())
  end
and __state_1 a0 k0 =
   k0 (__action_12 a0 ())
and __state_2 a0 k0 =
  let rec k1 x = __state_3 x a0 k0 k1
  in
   k1 (__action_17 ())
and __state_3 a0 a1 k0 k1 =
  let rec k2 x = __state_6 x k3
  and k3 x = __state_25 x a0 k1
  in
  match Parsing.lookahead () with
  | BANG =>
    let _ = Parsing.get_token () in
    __state_4 k2
  | EOF =>
    let _ = Parsing.get_token () in
    __state_5 a0 a1 k0
  | _ =>
    let _ = Parsing.rollback () in
     k2 (__action_9 ())
  end
and __state_4 k0 =
   k0 (__action_10 ())
and __state_5 a1 a2 k0 =
   k0 (__action_8 a1 a2 ())
and __state_6 a0 k0 =
  match Parsing.get_token () with
  | LID x => __state_7 x a0 k0
  | _ => Parsing.parse_error ()
  end
and __state_7 a0 a1 k0 =
  match Parsing.get_token () with
  | COLON => __state_8 a0 a1 k0
  | _ => Parsing.parse_error ()
  end
and __state_8 a1 a2 k0 =
  let rec k1 x = __state_10 x a1 a2 k0
  in
  match Parsing.lookahead () with
  | BAR =>
    let _ = Parsing.get_token () in
    __state_9 k1
  | _ =>
    let _ = Parsing.rollback () in
     k1 (__action_6 ())
  end
and __state_9 k0 =
   k0 (__action_7 ())
and __state_10 a0 a2 a3 k0 =
  let rec k1 x = __state_16 x k2
  and k2 x = __state_18 x k3
  and k3 x = __state_20 x k4
  and k4 x = __state_23 x a0 a2 a3 k0
  in
  match Parsing.lookahead () with
  | LID x =>
    let _ = Parsing.get_token () in
    __state_11 x k1
  | UID x =>
    let _ = Parsing.get_token () in
    __state_15 x k1
  | _ =>
    let _ = Parsing.rollback () in
     k2 (__action_4 ())
  end
and __state_11 a0 k0 =
  match Parsing.lookahead () with
  | COLON =>
    let _ = Parsing.get_token () in
    __state_12 a0 k0
  | _ =>
    let _ = Parsing.rollback () in
     k0 (__action_3 a0 ())
  end
and __state_12 a1 k0 =
  match Parsing.get_token () with
  | LID x => __state_13 x a1 k0
  | UID x => __state_14 x a1 k0
  | _ => Parsing.parse_error ()
  end
and __state_13 a0 a2 k0 =
   k0 (__action_2 a0 a2 ())
and __state_14 a0 a2 k0 =
   k0 (__action_1 a0 a2 ())
and __state_15 a0 k0 =
   k0 (__action_0 a0 ())
and __state_16 a0 k0 =
  let rec k1 x = __state_16 x k2
  and k2 x = __state_17 x a0 k0
  in
  match Parsing.lookahead () with
  | LID x =>
    let _ = Parsing.get_token () in
    __state_11 x k1
  | UID x =>
    let _ = Parsing.get_token () in
    __state_15 x k1
  | _ =>
    let _ = Parsing.rollback () in
     k2 (__action_4 ())
  end
and __state_17 a0 a1 k0 =
   k0 (__action_5 a0 a1 ())
and __state_18 a0 k0 =
  match Parsing.get_token () with
  | CODE x => __state_19 x a0 k0
  | _ => Parsing.parse_error ()
  end
and __state_19 a0 a1 k0 =
   k0 (__action_13 a0 a1 ())
and __state_20 a0 k0 =
  match Parsing.lookahead () with
  | BAR =>
    let _ = Parsing.get_token () in
    __state_21 a0 k0
  | _ =>
    let _ = Parsing.rollback () in
     k0 (__action_14 a0 ())
  end
and __state_21 a1 k0 =
  let rec k1 x = __state_16 x k2
  and k2 x = __state_18 x k3
  and k3 x = __state_20 x k4
  and k4 x = __state_22 x a1 k0
  in
  match Parsing.lookahead () with
  | LID x =>
    let _ = Parsing.get_token () in
    __state_11 x k1
  | UID x =>
    let _ = Parsing.get_token () in
    __state_15 x k1
  | _ =>
    let _ = Parsing.rollback () in
     k2 (__action_4 ())
  end
and __state_22 a0 a2 k0 =
   k0 (__action_15 a0 a2 ())
and __state_23 a0 a1 a3 a4 k0 =
  match Parsing.get_token () with
  | SEMICOLON => __state_24 a0 a1 a3 a4 k0
  | _ => Parsing.parse_error ()
  end
and __state_24 a1 a2 a4 a5 k0 =
   k0 (__action_16 a1 a2 a4 a5 ())
and __state_25 a0 a1 k0 =
   k0 (__action_18 a0 a1 ())

(* ======================================== *)
(* Initial rules *)
let file () = __state_0 (fn x => x)
