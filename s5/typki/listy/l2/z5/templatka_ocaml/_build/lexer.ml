# 3 "lexer.mll"
 

let report_error_lex (lexbuf : Lexing.lexbuf) fmt =
  Utils.report_error_pp lexbuf.lex_start_p lexbuf.lex_curr_p fmt

let kw_map =
  let open YaccParser in
  [ "absurd", KW_ABSURD
  ; "case",   KW_CASE
  ; "else",   KW_ELSE
  ; "false",  KW_FALSE
  ; "fix",    KW_FIX
  ; "fn",     KW_FN
  ; "fst",    KW_FST
  ; "if",     KW_IF
  ; "in",     KW_IN
  ; "inl",    KW_INL
  ; "inr",    KW_INR
  ; "let",    KW_LET
  ; "of",     KW_OF
  ; "rec",    KW_REC
  ; "snd",    KW_SND
  ; "then",   KW_THEN
  ; "true",   KW_TRUE
  ] |> List.to_seq |> Hashtbl.of_seq

let tokenize_ident str =
  match Hashtbl.find_opt kw_map str with
  | Some tok -> tok
  | None     -> YaccParser.ID str

let tokenize_number lexbuf str =
  match int_of_string_opt str with
  | Some n -> YaccParser.NUM n
  | None   ->
    report_error_lex lexbuf
      "invalid numeric literal"

# 41 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\241\255\242\255\084\000\192\000\245\255\247\255\248\255\
    \000\000\250\255\011\000\000\000\254\255\005\000\253\255\252\255\
    \249\255\167\000\250\255\251\255\013\000\002\000\003\000\255\255\
    \254\255\253\255\252\255\028\000\253\255\254\255\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\012\000\011\000\255\255\255\255\255\255\
    \009\000\255\255\014\000\004\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\005\000\005\000\005\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \255\255\000\000\255\255\255\255\000\000\255\255\000\000\000\000\
    \000\000\018\000\000\000\000\000\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\028\000\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\013\000\012\000\013\000\013\000\013\000\013\000\000\000\
    \013\000\013\000\013\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \013\000\000\000\000\000\000\000\000\000\013\000\030\000\000\000\
    \011\000\009\000\014\000\025\000\006\000\024\000\000\000\010\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\015\000\005\000\026\000\008\000\016\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\003\000\007\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\023\000\000\000\003\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\022\000\
    \000\000\021\000\000\000\000\000\000\000\000\000\020\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\029\000\000\000\000\000\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\013\000\255\255\
    \013\000\013\000\013\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\013\000\027\000\255\255\
    \000\000\000\000\011\000\021\000\000\000\022\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\010\000\000\000\020\000\000\000\008\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\255\255\
    \255\255\017\000\255\255\003\000\255\255\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\017\000\
    \255\255\017\000\255\255\255\255\255\255\255\255\017\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\004\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\255\255\027\000\255\255\255\255\004\000\
    \255\255\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 48 "lexer.mll"
                ( token lexbuf )
# 195 "lexer.ml"

  | 1 ->
# 49 "lexer.mll"
         ( Lexing.new_line lexbuf; token lexbuf )
# 200 "lexer.ml"

  | 2 ->
# 50 "lexer.mll"
         ( block_comment 1 lexbuf )
# 205 "lexer.ml"

  | 3 ->
# 51 "lexer.mll"
         ( skip_line lexbuf; token lexbuf )
# 210 "lexer.ml"

  | 4 ->
# 52 "lexer.mll"
         ( YaccParser.BR_OPN    )
# 215 "lexer.ml"

  | 5 ->
# 53 "lexer.mll"
         ( YaccParser.BR_CLS    )
# 220 "lexer.ml"

  | 6 ->
# 54 "lexer.mll"
         ( YaccParser.ARROW2    )
# 225 "lexer.ml"

  | 7 ->
# 55 "lexer.mll"
         ( YaccParser.BAR       )
# 230 "lexer.ml"

  | 8 ->
# 56 "lexer.mll"
         ( YaccParser.COMMA     )
# 235 "lexer.ml"

  | 9 ->
# 57 "lexer.mll"
         ( YaccParser.EQ        )
# 240 "lexer.ml"

  | 10 ->
# 58 "lexer.mll"
         ( YaccParser.SEMICOLON )
# 245 "lexer.ml"

  | 11 ->
let
# 59 "lexer.mll"
                           x
# 251 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 59 "lexer.mll"
                             ( tokenize_ident  x )
# 255 "lexer.ml"

  | 12 ->
let
# 60 "lexer.mll"
                           x
# 261 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 60 "lexer.mll"
                             ( tokenize_number lexbuf x )
# 265 "lexer.ml"

  | 13 ->
# 61 "lexer.mll"
           ( YaccParser.EOF )
# 270 "lexer.ml"

  | 14 ->
let
# 62 "lexer.mll"
         x
# 276 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 62 "lexer.mll"
           (
      report_error_lex lexbuf
        "invalid character in input ('%s')"
        (Char.escaped x)
    )
# 284 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and block_comment depth lexbuf =
   __ocaml_lex_block_comment_rec depth lexbuf 17
and __ocaml_lex_block_comment_rec depth lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 69 "lexer.mll"
         ( Lexing.new_line lexbuf; block_comment depth lexbuf )
# 296 "lexer.ml"

  | 1 ->
# 70 "lexer.mll"
         ( block_comment (depth+1) lexbuf )
# 301 "lexer.ml"

  | 2 ->
# 71 "lexer.mll"
         (
      if depth = 1 then token lexbuf
      else block_comment (depth-1) lexbuf
    )
# 309 "lexer.ml"

  | 3 ->
# 75 "lexer.mll"
         ( skip_line lexbuf; block_comment depth lexbuf )
# 314 "lexer.ml"

  | 4 ->
# 76 "lexer.mll"
        (
      report_error_lex lexbuf
        "unexpected end of file inside a block comment"
    )
# 322 "lexer.ml"

  | 5 ->
# 80 "lexer.mll"
      ( block_comment depth lexbuf )
# 327 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_block_comment_rec depth lexbuf __ocaml_lex_state

and skip_line lexbuf =
   __ocaml_lex_skip_line_rec lexbuf 27
and __ocaml_lex_skip_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 83 "lexer.mll"
         ( Lexing.new_line lexbuf )
# 339 "lexer.ml"

  | 1 ->
# 84 "lexer.mll"
         ( () )
# 344 "lexer.ml"

  | 2 ->
# 85 "lexer.mll"
         ( skip_line lexbuf )
# 349 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_skip_line_rec lexbuf __ocaml_lex_state

;;

