data rec Fix F = Fix of F (Fix F)

data ListF X L = Nil | Cons of X, L

let unFix (Fix l) = l
let nil       = Fix Nil
let cons x xs = Fix (Cons x xs)

let rec append xs ys =
  match unFix xs with
  | Nil       => ys
  | Cons x xs => cons x (append xs ys)
  end
